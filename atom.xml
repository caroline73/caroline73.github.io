<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caroline多维空间</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-04T06:47:50.030Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>caroline zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>reduce处理异步同步化</title>
    <link href="http://yoursite.com/2017/07/03/reduce%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E5%90%8C%E6%AD%A5%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/03/reduce处理异步同步化/</id>
    <published>2017-07-03T02:37:14.000Z</published>
    <updated>2017-07-04T06:47:50.030Z</updated>
    
    <content type="html"><![CDATA[<p>  在业务开发中遇到了一个场景，需要command-line linerface，然后程序根据用户输入做出不同处理，并且用户的输入是连续的。在查找了node.js的文档后，我找到了readLine的api。</p>
<h2 id="什么是readLine"><a href="#什么是readLine" class="headerlink" title="什么是readLine"></a>什么是readLine</h2><p>  readLine是node.js里实现标准输入输出的模块，通过这个模块我们可以以逐行的方式读取数据流。<br><a id="more"></a></p>
<h3 id="如何使用readLine"><a href="#如何使用readLine" class="headerlink" title="如何使用readLine"></a>如何使用readLine</h3><ul>
<li>创建readLine实例</li>
<li>学习里面的接口方法</li>
<li>学习监听与处理readLine方法</li>
</ul>
<p>文档的例子<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</div><div class="line">  <span class="attr">input</span>: process.stdin,</div><div class="line">  <span class="attr">output</span>: process.stdout</div><div class="line">&#125;);</div><div class="line"></div><div class="line">rl.question(<span class="string">'What do you think of Node.js? '</span>, (answer) =&gt; &#123;</div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> Log the answer in a database</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Thank you for your valuable feedback: <span class="subst">$&#123;answer&#125;</span>`</span>);</div><div class="line">  rl.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>在createInterface里，传入标准输入输出作为数据的输入和输出</li>
<li>在question方法的回调函数里，获取用户的输入并做相应处理，同时用close来结束程序。</li>
</ul>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>  找到了readLine，可以满足我在终端用question来询问用户，进行终端输入了。本文真正的讲点从这里开始了，由于每一个question都是异步的，所以我们的多个终端顺序输入遇到了挑战。<br>  首先，把每一个输入操作都转成Promise的异步，将所有的操作放到数组里面，其次利用reduce累加器的效果，实现异步操作顺序化。<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">array.reduce(callback, [initialValue])</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">preValue, curValue, index, array</span>) </span>&#123;&#125;</div><div class="line">preValue: 上次调用回调返回的值或提供的初始值</div><div class="line">curValue: 数组中当前被处理的数组项</div><div class="line">index： 当前数组项在数组中的索引值</div><div class="line">array: 调用reduce方法的数组</div></pre></td></tr></table></figure></p>
<p>  先看下reduce怎么解决Promise循环同步。<br>  不依赖reduce<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve()</div><div class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span>promise1)</div><div class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span>promise2)</div><div class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span>promise3)</div></pre></td></tr></table></figure></p>
<p>利用reduce：在每一次callback返回一个Promise对象，而这个对象是对preValue对象的一个封装，将preValue.then(()=&gt;promiseInstance)返回，又在下一次的回调函数中，presValue为上个回调函数的返回值。<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from(<span class="built_in">Array</span>(<span class="number">100</span>))</div><div class="line">.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">promise, value</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</div><div class="line">  &#125;)</div><div class="line">&#125;,<span class="built_in">Promise</span>.resolve(<span class="string">'init'</span>));</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    resolve();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> a.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> b;</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = read(<span class="string">'step1'</span>);</div><div class="line"><span class="keyword">const</span> b = read(<span class="string">'step2'</span>);</div></pre></td></tr></table></figure>
<p>结果是按照顺序 打印的<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">step1</div><div class="line">step2</div></pre></td></tr></table></figure></p>
<p>但是我们的read还需要有一个readline的api，而且readline本身是异步的。代码<br><figure class="highlight javascript"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> rlp = readline.createInterface(&#123;</div><div class="line">  <span class="attr">input</span>: process.stdin,</div><div class="line">  <span class="attr">output</span>: process.stdout</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">       rlp.question(msg+<span class="string">'\n'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">        resolve(input);</div><div class="line">       &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> a().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> b();</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = read(<span class="string">'step1'</span>);</div><div class="line"><span class="keyword">const</span> b = read(<span class="string">'step2'</span>);</div></pre></td></tr></table></figure></p>
<p>能够完成循环执行promise的需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在业务开发中遇到了一个场景，需要command-line linerface，然后程序根据用户输入做出不同处理，并且用户的输入是连续的。在查找了node.js的文档后，我找到了readLine的api。&lt;/p&gt;
&lt;h2 id=&quot;什么是readLine&quot;&gt;&lt;a href=&quot;#什么是readLine&quot; class=&quot;headerlink&quot; title=&quot;什么是readLine&quot;&gt;&lt;/a&gt;什么是readLine&lt;/h2&gt;&lt;p&gt;  readLine是node.js里实现标准输入输出的模块，通过这个模块我们可以以逐行的方式读取数据流。&lt;br&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端模块</title>
    <link href="http://yoursite.com/2017/06/13/%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2017/06/13/前端业务功能模块工程化/</id>
    <published>2017-06-13T08:06:48.000Z</published>
    <updated>2017-07-02T08:14:16.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端功能模块"><a href="#前端功能模块" class="headerlink" title="前端功能模块"></a>前端功能模块</h2><blockquote>
<p>在项目里面，可能会遇到一个完整的功能模块提取的问题。在A项目里面，有一套竞猜的功能模块，在B项目里面也有相同的功能，只不过皮肤不一样，确切的说就是样式不一样。以前我们遇到这种问题最寻常的解决方法，就是’xx，你去A项目里面把代码copy到B里面’，这种解决方案，不用说有经验的工程师肯定都不会选择。所以，我们最想就是提取前端功能模块。那么问题来了，什么样的功能模块符合我们上述的例子呢？</p>
<ul>
<li>功能模块单一</li>
<li>多个项目都会用到</li>
</ul>
<p>例如上面的例子，竞猜模块，基本现在我所在的业务线都会用到，而且业务逻辑基本不变。竞猜里面的逻辑和其他的项目功能基本没有耦合，仅仅是有弹窗的需求，还利用了弹窗组件可以传递ui和hanlder的接口解耦。后期如果竞猜的模块功能有修改，不影响其他的功能。所以在处理前端功能模块的时候，不自觉的就会设计高内聚低耦合，这样方便后期的维护以及项目里面的解耦。</p>
</blockquote>
<h2 id="前端功能模块的开发"><a href="#前端功能模块的开发" class="headerlink" title="前端功能模块的开发"></a>前端功能模块的开发</h2><blockquote>
<p>很多人说，那我开发一个模块，自己建立一个项目写好了打包一个，用就可以了。的确，如果模块是一个人维护的话，这样运作是没有问题的，但是如果上升到团队维护，确实有问题。</p>
<ul>
<li>团队的多人维护，需要一个统一的目录规范，那么每个人download文件，不用花费任何看项目结构的时间，既可以开发维护；</li>
<li>如果随着团队基础工具的升级，那么模块开发工具也可以统一升级，不要额外每个模块都去添加打包编译的工具性代码，毕竟模块处理自己的功能逻辑是主旋律；</li>
<li>将目录生成、编译打包和模块业务功能拆分，是按照基础服务、业务功能这种层次划分的，互不影响。</li>
</ul>
</blockquote>
<h2 id="fe-module-generater"><a href="#fe-module-generater" class="headerlink" title="fe-module-generater"></a>fe-module-generater</h2><blockquote>
<p><a href="https://github.com/caroline73/fe-module-generater" target="_blank" rel="external">fe-module-generater</a><br>前端模块开发目录生成器</p>
</blockquote>
<h2 id="fe-module-build"><a href="#fe-module-build" class="headerlink" title="fe-module-build"></a>fe-module-build</h2><blockquote>
<p><a href="https://github.com/caroline73/fe-module-build" target="_blank" rel="external">fe-module-build</a><br>前端模块编译工具</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端功能模块&quot;&gt;&lt;a href=&quot;#前端功能模块&quot; class=&quot;headerlink&quot; title=&quot;前端功能模块&quot;&gt;&lt;/a&gt;前端功能模块&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在项目里面，可能会遇到一个完整的功能模块提取的问题。在A项目里面，有一套竞猜的功能
    
    </summary>
    
      <category term="前端工程化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
      <category term="generate" scheme="http://yoursite.com/tags/generate/"/>
    
      <category term="commander" scheme="http://yoursite.com/tags/commander/"/>
    
  </entry>
  
</feed>
